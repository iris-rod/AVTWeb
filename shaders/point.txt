        #define TOTAL_LIGHTS 9
        uniform sampler2D texture1;
        uniform sampler2D texture2;
        
        uniform bool spotOn;
        uniform bool directionalLightOn;
        uniform bool pointLightOn;        

        varying vec2 vUv;
        varying vec3 norm;
        varying vec3 eye;
        varying vec4 pos;       
        
        
        struct PointLight{
            vec3 color;
            vec3 position;
            float distance;
        };
        uniform PointLight pointLights[NUM_POINT_LIGHTS];  
        
        struct DirectionalLight{
            vec3 color;
            vec3 position;
            vec3 direction;
        };
        uniform DirectionalLight directionalLights[NUM_DIR_LIGHTS];
        
        void main() {
            vec4 texel = texture2D(texture1,vUv);
            vec4 texel1 = texture2D(texture2,vUv);

            
            vec4 addedLights = vec4(0.5,0.5,0.5, 1.0);
        for(int l = 0; l < NUM_POINT_LIGHTS; l++) {
            vec3 lightDirection = normalize(vec3(pos) - pointLights[l].position);
            addedLights.rgb += clamp(dot(-lightDirection, norm), 0.0, 1.0) * pointLights[l].color*1.;
          }
          for(int l = 0; l < NUM_DIR_LIGHTS; l++) {
            vec3 lightDirection = vec3(2);//normalize(vec3(pos) - directionalLights[0].position);
            vec3 color = vec3(1);
            addedLights.rgb += clamp(dot(-lightDirection, norm), 0.0, 1.0) * color*10.;
          }
          
            gl_FragColor = texel * texel1 * addedLights;
            
		    //gl_FragColor =max(total_intensity * texel * texel1 + total_spec,vec4(1));
            
            //gl_FragColor =max(total_intensity * texel * texel1 + total_spec,0.1*(total_intensity * texel * texel1 + total_spec));
            
        }